{"meta":{"title":"学不完了","subtitle":"","description":"","author":"JQ","url":"https://www.fansmiku.com","root":"/"},"pages":[{"title":"文章归档","date":"2023-04-27T07:57:05.340Z","updated":"2023-04-27T07:57:05.340Z","comments":true,"path":"/archive.html","permalink":"https://www.fansmiku.com/archive.html","excerpt":"","text":""}],"posts":[{"title":"HttpServletRequest#getParameter","slug":"HttpServletRequest-getParameter","date":"2023-05-04T02:34:13.000Z","updated":"2023-05-04T02:45:41.551Z","comments":true,"path":"2023/05/04/HttpServletRequest-getParameter/","link":"","permalink":"https://www.fansmiku.com/2023/05/04/HttpServletRequest-getParameter/","excerpt":"","text":"HttpServletRequest#getParameter以Tomcat容器实现为例 实现类为org.apache.catalina.connector.Request 关键代码12345678@Overridepublic String getParameter(String name) &#123; // 确保一个Request只会执行一次解析 if (!parametersParsed) &#123; parseParameters(); &#125; ····&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115protected void parseParameters() &#123; try &#123; // 处理URL拼接的请求参数 parameters.handleQueryParameters(); if (usingInputStream || usingReader) &#123; success = true; return; &#125; // 获取ContentType 如果有多个取第一个为准 String contentType = getContentType(); if (contentType == null) &#123; contentType = &quot;&quot;; &#125; int semicolon = contentType.indexOf(&#x27;;&#x27;); if (semicolon &gt;= 0) &#123; contentType = contentType.substring(0, semicolon).trim(); &#125; else &#123; contentType = contentType.trim(); &#125; // 判断ContentType类型 如果是多媒体类型 那么使用ParseParts if (&quot;multipart/form-data&quot;.equals(contentType)) &#123; parseParts(false); success = true; return; &#125; // 判断是否是需要解析请求体的请求 POST if( !getConnector().isParseBodyMethod(getMethod()) ) &#123; success = true; return; &#125; // 当contenttype不为application/x-www-form-urlencoded退出，不在执行下面的关键代码 if (!(&quot;application/x-www-form-urlencoded&quot;.equals(contentType))) &#123; success = true; return; &#125; int len = getContentLength(); if (len &gt; 0) &#123; int maxPostSize = connector.getMaxPostSize(); if ((maxPostSize &gt;= 0) &amp;&amp; (len &gt; maxPostSize)) &#123; Context context = getContext(); if (context != null &amp;&amp; context.getLogger().isDebugEnabled()) &#123; context.getLogger().debug( sm.getString(&quot;coyoteRequest.postTooLarge&quot;)); &#125; checkSwallowInput(); parameters.setParseFailedReason(FailReason.POST_TOO_LARGE); return; &#125; byte[] formData = null; if (len &lt; CACHED_POST_LEN) &#123; if (postData == null) &#123; postData = new byte[CACHED_POST_LEN]; &#125; formData = postData; &#125; else &#123; formData = new byte[len]; &#125; try &#123; // readPostBody方法其实就是request.getinputstream().read(); 所以getParameter会读取完流,如果需要流 多次读取那么需要使用包装类 if (readPostBody(formData, len) != len) &#123; parameters.setParseFailedReason(FailReason.REQUEST_BODY_INCOMPLETE); return; &#125; &#125; catch (IOException e) &#123; // Client disconnect Context context = getContext(); if (context != null &amp;&amp; context.getLogger().isDebugEnabled()) &#123; context.getLogger().debug( sm.getString(&quot;coyoteRequest.parseParameters&quot;), e); &#125; parameters.setParseFailedReason(FailReason.CLIENT_DISCONNECT); return; &#125; parameters.processParameters(formData, 0, len); &#125; else if (&quot;chunked&quot;.equalsIgnoreCase( coyoteRequest.getHeader(&quot;transfer-encoding&quot;))) &#123; byte[] formData = null; try &#123; formData = readChunkedPostBody(); &#125; catch (IllegalStateException ise) &#123; // chunkedPostTooLarge error parameters.setParseFailedReason(FailReason.POST_TOO_LARGE); Context context = getContext(); if (context != null &amp;&amp; context.getLogger().isDebugEnabled()) &#123; context.getLogger().debug( sm.getString(&quot;coyoteRequest.parseParameters&quot;), ise); &#125; return; &#125; catch (IOException e) &#123; // Client disconnect parameters.setParseFailedReason(FailReason.CLIENT_DISCONNECT); Context context = getContext(); if (context != null &amp;&amp; context.getLogger().isDebugEnabled()) &#123; context.getLogger().debug( sm.getString(&quot;coyoteRequest.parseParameters&quot;), e); &#125; return; &#125; if (formData != null) &#123; parameters.processParameters(formData, 0, formData.length); &#125; &#125; success = true; &#125; finally &#123; if (!success) &#123; parameters.setParseFailedReason(FailReason.UNKNOWN); &#125; &#125;&#125;","categories":[],"tags":[{"name":"Servlet","slug":"Servlet","permalink":"https://www.fansmiku.com/tags/Servlet/"},{"name":"源码解析","slug":"源码解析","permalink":"https://www.fansmiku.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"}]}],"categories":[],"tags":[{"name":"Servlet","slug":"Servlet","permalink":"https://www.fansmiku.com/tags/Servlet/"},{"name":"源码解析","slug":"源码解析","permalink":"https://www.fansmiku.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"}]}